---
title: "Eloquent Javascript Notes: Chapter 3"
date: 2020-05-05
layout: blog-layout
category: javascript
---

Welcome to the notes for [Functions](https://eloquentjavascript.net/03_functions.html). This is an important chapter. Let's read together. Shall we? Yes, we shall.

## Javi's Notes

### Concepts I Don't Understand

_Lexical Scoping_ was a bit hard to understand at first read.
I re-read it a couple of times, and I think the explanation of functions always looking 'outward' helps.
Imagine a concentric ring of circles.

### New Vocabulary

_Lexical Scoping_ https://en.wikipedia.org/wiki/Scope_(computer_science)#Lexical_scoping


### Sections That Were Written Well

**Scope**

Scope is an important concept to be comfortable with as a lot of bugs in JavaScript relate to scope.

Things that help with managing scope are:

- naming variables well so that you're not confused what scope they are in (linters can help with this)

- avoiding global scope (it's harder to keep track of something far away from your function)

  > The set of bindings visible inside a block is determined by the place of that block in the program text. Each local scope can also see all the  local scopes that contain it, and all scopes can see the global scope.  This approach to binding visibility is called *lexical scoping*.

## Functions as values

This is a very common technique in JavaScript. I don't think we saw it in Ruby, but in JS functions are often treated like other variables: passed around and manipulated.

**Closures**

> Thinking about programs like this takes some practice. A good mental  model is to think of function values as containing both the code in  their body and the environment in which they are created. When called,  the function body sees the environment in which it was created, not the  environment in which it is called.

This is really important and an extension built on how scope behaves. You'll see this pattern a lot in modules.

## Michael's Notes

Here are Michael's notes.

### New Concepts

> Each scope can “look out” into the scope around it, so x is visible inside the block in the example. The exception is when multiple bindings have the same name—in that case, code can see only the innermost one. For example, when the code inside the halve function refers to n, it is seeing its own n, not the global n.

I get this. But does this mean you should have unique names for arguments you pass in to a function, when the same data is being passed through multiple functions? Or is it okay to use `n` over and over, because it's the same data moving through?

**Optional Arguments**

You can set the value of an argument with `=` in case no one passes an arguemnt like:

let makeMotorcycle = function (wheels = 2) {
    wheels + theRest
}

That's a bad example, but you can set the argument value. 

Also, JS is not picky about missing arguments like Ruby is.

**Growing Functions**

Make sure each function does only one thing so it's reusable. This seems difficult to me, because you have to break down the functions into smaller and smaller functions. It seems easier to write one or two functions that do what you want. That's less to wrap your head around. But I see how it wouldn't be reusable, so you'd be rewriting code all the time.

* **Amendment 5/6**

  * Functions should be written organically, and through the process of rewriting and code reviews, you should find ways to simplify the code so every function does one thing. If one "super function" contains all the code to get something done, removing one piece will make the whole thing fall apart, but if it's broken into smaller functions, you can more easily make changes and move things.

  * The responsibility of the programmar is to 1.) write the function and make sure it works. Then 2.) refactor so every function does one thing.

  * When it comes to how much we need to "break down" a function, this is where code review and talking with other programmers helps. If you have a function that outputs an <li> wrapped wored in html, is that good enough, or should you have an argument that will determine the html tag which wraps the content? Will anyone use this again? Does this code exist somewhere else?

### New Vocabulary

**lexical scoping**

A scopes can see scopes that surround them. All scopes can see global scope.

* **Amendment 5/6**

  * Think of it like concentric circles. Every level can see the level before it, all the way back to global. So in a 10-level circle-nest, level 6 can see 5, 4, 3, 2, 1, and global.

**Function Declaration**

Shorter notation to make a function. The only practical difference is it is not part of the top-to-bottom order or JS. Meaning, you can call it before it is declared, and it will still work. Looks like this:

```
function square(x) {
  return x * x;
}
```

**Function expressions**

Regular type functions.

**Arrow Functions**

The one with arrows.

* **Amendment 5/6**

  * Arrow functions are an important part of ES6 that Michael should try to use more so he can learn to read them better. At the beginning of ES6, they were like a kickflip in Javascript, a way to skate in and show everyone you are a cool pro. Now they are used for conciseness. And as more people get used to them, they may become a new standard. If you use them a lot, they become easier to read.

**The Call Stack**

The stack that remembers what line (or place) you are in the code execution when a function is called. When JS runs, it runs top to bottom. Line 16, 17, 18, 19. Then a function is called. The Call Stack remembers line 19. The code jumps to Line 2 where the function lives, runs through the function. Then the Call Stack is used to remember where it was before it got sidetracked. Back to line 19. Almost like a bookmark.

* **Amendment 5/6**

  * The call stack does remember where a program left off when a function is called, but it's more than that. It's a stack of functions that need to be resolved in order to continue. If a function looks like this:

```
let rideMotocycle = function () {
    getKeys()
    fillUpGasTank()
    sitOnMotorCycle()
    startEngine()
    rideBackToArizona()
}
```

```
let getKeys = function () {
    lookUnderCouchCushions()
}
```

```
let fillUpGasTank = function () {
    getGasCan()
    putGasinCan()
    putGasFromCanInGashole()
}
```

  * Then your call stack adds a function to the stack every time it needs to go to a new function. It can't resolve that function until the other functions run.

  * rideMotocycle
    * getKeys
      * lookUnderCouchCushions 
    * fillUpGasTank 
      * getGasCan
      * putGasinCan
      * putGasFromCanInGashole
    * sitOnMotorCycle
    * startEngine
    * rideBackToArizona

  * So the stack is only ever three deep.

**Closure**

The idea that a when a function is called, it's returning the entire environment, with all the parameters and calculations therein. If you store a function with certain parameters in variable `x`, that variable is storing the entire environment, not just the return.

* **Amendment 5/6**

  * When you call a function, you're calling the entire machine, including the arguments passed in, all the computed pieces, and the return. When you learn to use the closure, it can hide the computational parts and only reveal the returns or the results you want shown. It's like private in Ruby, but Javascript doesn't have that.

### Sections That Were Written Well

> Typical adult English speakers have some 20,000 words in their vocabulary. Few programming languages come with 20,000 commands built in. And the vocabulary that is available tends to be more precisely defined, and thus less flexible, than in human language. Therefore, we usually have to introduce new concepts to avoid repeating ourselves too much.

Good way of putting it. I hadn't thought of a programming language as "not having that many words." The idea that you only have a handful of words, and you have to use them to combine and create new "words" or concepts makes sense. I hadn't thought of it in those terms before.

> Running through a simple loop is generally cheaper than calling a function multiple times.

**Pure Functions**

> A pure function has the pleasant property that, when called with the same arguments, it always produces the same value (and doesn’t do anything else).

Good to know.

> In the case of the power function, the inelegant (looping) version is still fairly simple and easy to read. It doesn’t make much sense to replace it with the recursive version. Often, though, a program deals with such complex concepts that giving up some efficiency in order to make the program more straightforward is helpful.
>
> Worrying about efficiency can be a distraction. It’s yet another factor that complicates program design, and when you’re doing something that’s already difficult, that extra thing to worry about can be paralyzing.
> 
> Therefore, always start by writing something that’s correct and easy to understand. If you’re worried that it’s too slow—which it usually isn’t since most code simply isn’t executed often enough to take any significant amount of time—you can measure afterward and improve it if necessary.

On the balance between efficiency and human-friendliness.

* **Amendment 5/6**

  * A pure function is one that does not affect anything outside of it. It's used, it returns a value, and it doesn't have side effects, or it's not used for it's side effects. You may be able to turn off your light by stomping on a basketball, but it would be better to have a light switch, something that is directly affecting the light and designed to turn off the light.

  * Pure functions don't affect global variables. 

### Sections That Were Written Not So Well

**The whole section on closure**

Not clear what closure is or how it works. Had to read section several times.

<script>

//exercise 1: minimum
let min = function (n1, n2) {
    if (n1 < n2) {
        return n1
    } else {
        return n2
    }
}

console.log(min(0, 10));
// → 0
console.log(min(0, -10));
// → -10

// exercise 3: bean counting

let countBs = function (string) {
    array = string.split("")
    counter = 0
    array.forEach(function (item) {
        if (item === "B") {
            counter ++
        }
    })
    return counter
}

let countChar = function (string, char) {
    array = string.split("")
    counter = 0
    array.forEach(function (item) {
        if (item === char) {
            counter ++
        }
    })
    return counter
}

console.log(countBs("BBC"));
// → 2
console.log(countChar("kakkerlak", "k"));
// → 4

</script>
