---
title: "Eloquent Javascript Notes: Chapter 5"
date: 2020-05-13
layout: blog-layout
category: javascript
published: false
---

Welcome to the notes for [Chapter 5: Higher Order Functions](https://eloquentjavascript.net/05_higher_order.html). Let's learn all about these things.

### New Vocabulary

**Higher-order functions**

Functions that operate on other functions, either by taking them as arguments or by returning them, are called higher-order functions.

**The Filter method**

The filter method returns a new array containing only the elements that pass the predicate function.

[Read more on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)

**The Reduce Method**

You can use reduce to combine all the elements in an array into a single value.

[Read more on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce)

**The Some Method**

The some method tests whether any element matches a given predicate function.

[Read more on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)

---

All these methods require you to pass in a function that they need to function. They're functions that need another function to run. Therefore, they're higher order functions.

<script>

// your own loop
let loop = function (value, testFunction, updateFunction, bodyFunction) {

    let i = value

    while (testFunction(i)) {
        bodyFunction(i)
        i = updateFunction(i)
    }

}

loop(3, n => n > 0, n => n - 1, console.log)

// → 3
// → 2
// → 1

// every

//ver 1
/*
let every = function (array, test) {

    emptyArray = []

    array.forEach(function (item) {
        if (test(item)) {
            emptyArray.push(item)
        } else {
            console.log ('no go')
        }
    })

    if (array.length == emptyArray.length) {
        return true
    } else {
        return false
    }
    
}
*/

let every = function (array, test) {
    if (array.some(test) == true && !array.some(test)) {
        return true
    } else {
        return false

    }

}

console.log(every([1, 3, 5], n => n < 10));
// → true
//console.log(every([2, 4, 16], n => n < 10));
// → false
//console.log(every([], n => n < 10));
// → true

</script>