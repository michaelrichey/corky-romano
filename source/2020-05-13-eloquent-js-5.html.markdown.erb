---
title: "Eloquent Javascript Notes: Chapter 5"
date: 2020-05-13
layout: blog-layout
category: javascript
published: false
---

Welcome to the notes for [Chapter 5: Higher Order Functions](https://eloquentjavascript.net/05_higher_order.html). Let's learn all about these things.

## Concepts

Longer, bigger programs are harder to read and parse. Also, their size gives more space for bugs to hide. More to read, and more possibility for bugs and errors.

A smaller program, perhaps one line, which uses other functions within functions can be easier to read and has less space for bugs to hide (in that one line anyway).

### New Vocabulary

**Abstractions**

In programming, abstractions are these lines of code that use functions in functions in functions to make a line of code more "readable" to a human. It abstracts what's actually going on so you can talk about the code on higher level of understanding.

**Abstracting Repetition**

This section breaks down how a simple Codecademy-style function can be broken down into more and more reusable parts and named so each function clearly states what it does—thus making the whole thing readable.

Finally, it shows how sometimes it's not worth passing in a named function, but rather writing a function directly in the parens to pass in as an argument.

**Higher-order functions**

Functions that operate on other functions, either by taking them as arguments or by returning them, are called higher-order functions.

**The Filter method**

The filter method returns a new array containing only the elements that pass the predicate function.

[Read more on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)

**The Reduce Method**

You can use reduce to combine all the elements in an array into a single value.

[Read more on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce)

**The Some Method**

The some method tests whether any element matches a given predicate function.

[Read more on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)

**Composability**

When tasks get complex, the more abstract programs are easier to read, though they're harder on the computer. If you're dealing with huge arrays and working with them over and over, the less abstract, hard-to-read version will help the computer get its job done.

## Quotes to Remember

"It is a useful skill, in programming, to notice when you are working at too low a level of abstraction."

---

All these methods require you to pass in a function that they need to function. They're functions that need another function to run. Therefore, they're higher order functions.

<script>

// your own loop
let loop = function (value, testFunction, updateFunction, bodyFunction) {

    let i = value

    while (testFunction(i)) {
        bodyFunction(i)
        i = updateFunction(i)
    }

}

loop(3, n => n > 0, n => n - 1, console.log)

// → 3
// → 2
// → 1

// every

//ver 1
/*
let every = function (array, test) {

    emptyArray = []

    array.forEach(function (item) {
        if (test(item)) {
            emptyArray.push(item)
        } else {
            console.log ('no go')
        }
    })

    if (array.length == emptyArray.length) {
        return true
    } else {
        return false
    }
    
}
*/

let every = function (array, test) {
    if (array.some(test) == true && !array.some(test)) {
        return true
    } else {
        return false

    }

}

console.log(every([1, 3, 5], n => n < 10));
// → true
//console.log(every([2, 4, 16], n => n < 10));
// → false
//console.log(every([], n => n < 10));
// → true

</script>